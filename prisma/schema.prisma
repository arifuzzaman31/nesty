// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
  //output   = "./generated/prisma"

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Users {
  id                    Int       @id @default(autoincrement())
  uid                   String    @unique @default(uuid())
  email                 String    @unique
  phone                 String    @unique
  name                  String?
  password              String
  status                UserStatus @default(PENDING)
  userWeight            Int?      @default(2)
  isMfaEnabled          Boolean?  @default(false)
  loginAttempts         Int?      @default(0)
  isPasswordValid       Boolean?  @default(false)
  isPasswordResetRequired Boolean? @default(true)
  lastPasswordResetDate DateTime? @default(now())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  roleId                Int
  roleInfo              Roles     @relation(fields: [roleId], references: [id])
  orders                Order[]
  tokens                Tokens? // Relation to Tokens model
  @@map("users")
}

model Tokens {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  user         Users    @relation(fields: [userId], references: [id])
  refreshToken String   @unique
  expiresAt    DateTime // Token expiration date
  isRevoked     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt             DateTime  @updatedAt
  @@map("tokens")
}

model Roles {
  id      Int     @id @default(autoincrement())
  role    String
  context String
  Users   Users[]
  @@map("roles")
}

model Product {
  id       Int     @id     @default(autoincrement())
  name        String
  description String
  price       Float
  weight      Float
  enabled     Boolean @default(true)
  orders      OrderItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Promotion {
  id       Int     @id     @default(autoincrement())
  title     String
  type      PromotionType   @default(percentage)
  startDate DateTime
  endDate   DateTime
  enabled   Boolean    @default(true)
  slabs     Slab[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Slab {
  id       Int     @id     @default(autoincrement())
  promotionId  Int
  minWeight    Float
  maxWeight    Float?
  discount     Float     // per 500gm for weighted type
  promotion    Promotion @relation(fields: [promotionId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id       Int     @id    @default(autoincrement())
  customerId  Int
  total     Float
  discount  Float         @default(0)
  grandTotal Float
  items     OrderItem[]
  customers    Users      @relation(fields: [customerId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        Int   @id   @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  unitPrice Float
  discount  Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
enum PromotionType {
  percentage
  fixed
  weighted
}
enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  BLOCKED
}
